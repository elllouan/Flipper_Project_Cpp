A shader is a program that runs on the GPU. It is used to render shapes
out on the screen. There exist multiple shaders but here are the most common
ones:
- vertex shader: determines the position of each position vertex on the screen.
- geometry shader: 
- fragment shader: determines the color of each pixel on the shapes that was displayed.

The fragment shader is much more expensive operation because it gets called as many times
as the number of pixels there are within the shape defined by the vertex shader.

CHAP 1: OpenGL objects and graphics pipeline

The graphics pipeline is:
GPU -> vertex shader -> fragment shader -> screen

Some definitions:
- A fragment 
	is all the data required for OpenGL to render a single pixel.
- VBO for Vertex Buffer Object 
	is an OpenGL object that aims to store raw data such as position, color, textture, brightness ...
- VAO for Vertex Array Object 
	is an OpenGL object that aims to tell how to access the data of a bounded VBO.
https://www.youtube.com/watch?v=Ktp1P4J04Gw
- EBO for Element Buffer Object
	is a buffer, just like a VBO, that stores indices that OpenGL uses to decide what vertices to draw. It helps avoiding overlapping.


Steps to follow to render sth out:
Manage OpenGL objects:
	1. glGenBuffer or glGenVertexArrays: generate VBO, EBO or VAO.
	2. glBindBuffer or glBindVertexArray: bind VBO, EBO or VAOto the current context.
	3. glBufferData (for VBO and EBO): specify details about data for each buffer.
	4. glVertexAttribPointer: specify how to access attributes of the bounded VBO.
	5. glEnableVertexArray

Create simple shaders:
	1. 
	2.
	3.
	4.
	5.
	6.


CHAP 2: Shaders with GLSL

	1. Transfer data from one shader to another one by using 'in' and 'out' keywords.
	2. Uniforms are another way to pass data from our application on the CPU to the shaders on the GPU.
		They are global variables that can be accesed from whichever shader and also from the code.
